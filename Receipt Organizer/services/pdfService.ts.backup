import * as FileSystem from 'expo-file-system';
import { Platform, Alert } from 'react-native';
import { Receipt } from '@/types/receipt';
import { formatCurrency, formatDate } from '@/utils/formatter';
import * as ImageManipulator from 'expo-image-manipulator';

// This is a mock PDF service since we can't actually generate PDFs in this environment
// In a real app, you would use a library like react-native-html-to-pdf or react-native-pdf-lib

export interface PdfOptions {
  title: string;
  startDate: string;
  endDate: string;
  includeImages: boolean;
  businessInfo: {
    name: string;
    address: string;
    taxId: string;
  };
}

export const generateReceiptPdf = async (receipt: Receipt, options?: PdfOptions): Promise<string> => {
  try {
    
    // Create HTML content for the receipt
    const html = `

export async function generateReportPdf(
  receipts: Receipt[],
  options: PdfOptions
): Promise<string> {
  try {
    // Show user feedback that PDF generation is starting
    console.log('Starting PDF report generation for', receipts.length, 'receipts');
    
    // Simulate a longer delay for report generation with progress feedback
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // In a real app, this would generate a PDF report from the receipts
    // For this demo, we'll create a more realistic simulation
    
    if (Platform.OS === 'web') {
      // For web, create a data URL that represents a PDF
      const pdfContent = createReportPdfContent(receipts, options);
      const blob = new Blob([pdfContent], { type: 'application/pdf' });
      const url = URL.createObjectURL(blob);
      
      // Show success message with download option
      Alert.alert('Success', `Report generated with ${receipts.length} receipts`, [
        { text: 'OK' }
      ]);
      
      return url;
    } else {
      // For native platforms, simulate saving to file system
      const pdfFileName = `expense_report_${Date.now()}.pdf`;
      const pdfFilePath = `${FileSystem.documentDirectory}${pdfFileName}`;
      
      // In a real app, we would actually create the PDF file here
      // For this demo, we'll create a placeholder file with metadata
      const reportMetadata = {
        title: options.title,
        receipts: receipts.length,
        totalAmount: receipts.reduce((sum, r) => sum + r.amount, 0),
        dateRange: `${options.startDate} to ${options.endDate}`,
        generated: new Date().toISOString()
      };
      
      await FileSystem.writeAsStringAsync(pdfFilePath, JSON.stringify(reportMetadata, null, 2), {
        encoding: FileSystem.EncodingType.UTF8,
      });
      
      // Show success message
      Alert.alert('Success', `Report saved: ${pdfFileName}\nTotal: ${formatCurrency(reportMetadata.totalAmount)}`, [
        { text: 'OK' }
      ]);
      
      return pdfFilePath;
    }
  } catch (error) {
    console.error('Error generating report PDF:', error);
    Alert.alert('Error', 'Failed to generate PDF report. Please try again.');
    throw new Error('Failed to generate PDF report');
  }
}

// Convert image to PDF
export async function convertImageToPdf(imageUri: string): Promise<string> {
  try {
    console.log('Converting image to PDF:', imageUri);
    
    // Simulate a delay for conversion
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // Return a dummy file URI
    if (Platform.OS === 'web') {
      return 'data:application/pdf;base64,JVBERi0xLjcKJeLjz9MKNSAwIG9iago8PC9GaWx0ZXIvRmxhdGVEZWNvZGUvTGVuZ3RoIDM4Pj5zdHJlYW0KeJwr5HIK4TI2UzC0NFMISeFyDeEK5CpUMFQwAEJDBV0jI4XkXIWQNCC/QMExMzk1MS8dAHBUCxcKZW5kc3RyZWFtCmVuZG9iago0IDAgb2JqCjw8L0NvbnRlbnRzIDUgMCBSL01lZGlhQm94WzAgMCA1OTUgODQyXS9QYXJlbnQgMiAwIFIvUmVzb3VyY2VzPDwvRm9udDw8L0YxIDYgMCBSPj4+Pi9UcmltQm94WzAgMCA1OTUgODQyXS9UeXBlL1BhZ2U+PgplbmRvYmoKMSAwIG9iago8PC9QYWdlcyAyIDAgUi9UeXBlL0NhdGFsb2c+PgplbmRvYmoKMyAwIG9iago8PC9BdXRob3IoUmVjZWlwdCBUcmFja2VyKS9DcmVhdGlvbkRhdGUoRDoyMDIzMDYyMDEyMDAwMFopL01vZGlmaWNhdGlvbkRhdGUoRDoyMDIzMDYyMDEyMDAwMFopL1Byb2R1Y2VyKFJlY2VpcHQgVHJhY2tlcikvVGl0bGUoUmVjZWlwdCBJbWFnZSk+PgplbmRvYmoKMiAwIG9iago8PC9Db3VudCAxL0tpZHNbNCAwIFJdL1R5cGUvUGFnZXM+PgplbmRvYmoKNiAwIG9iago8PC9CYXNlRm9udC9IZWx2ZXRpY2EvRW5jb2RpbmcvV2luQW5zaUVuY29kaW5nL1N1YnR5cGUvVHlwZTEvVHlwZS9Gb250Pj4KZW5kb2JqCnhyZWYKMCA3CjAwMDAwMDAwMDAgNjU1MzUgZg0KMDAwMDAwMDE5MiAwMDAwMCBuDQowMDAwMDAwMzY3IDAwMDAwIG4NCjAwMDAwMDAyMzcgMDAwMDAgbg0KMDAwMDAwMDA4NyAwMDAwMCBuDQowMDAwMDAwMDE1IDAwMDAwIG4NCjAwMDAwMDA0MTggMDAwMDAgbg0KdHJhaWxlcgo8PC9JbmZvIDMgMCBSL1Jvb3QgMSAwIFIvU2l6ZSA3Pj4Kc3RhcnR4cmVmCjUwNQolJUVPRgo=';
    } else {
      const pdfFileName = `receipt_${new Date().getTime()}.pdf`;
      const pdfFilePath = `${FileSystem.documentDirectory}${pdfFileName}`;
      
      // In a real app, we would actually create the PDF file here
      // For this demo, we'll just return the path
      
      return pdfFilePath;
    }
  } catch (error) {
    console.error('Error converting image to PDF:', error);
    throw new Error('Failed to convert image to PDF');
  }
}

// Helper functions for creating PDF content (simplified for demo)
function createReceiptPdfContent(receipt: Receipt): string {
  return `%PDF-1.4
Receipt: ${receipt.vendor}
Amount: ${formatCurrency(receipt.amount)}
Date: ${formatDate(receipt.date)}
Category: ${receipt.category}
Notes: ${receipt.notes}`;
}

function createReportPdfContent(receipts: Receipt[], options: PdfOptions): string {
  const totalAmount = receipts.reduce((sum, r) => sum + r.amount, 0);
  return `%PDF-1.4
${options.title}
Period: ${formatDate(options.startDate)} - ${formatDate(options.endDate)}
Total Receipts: ${receipts.length}
Total Amount: ${formatCurrency(totalAmount)}

Receipts:
${receipts.map(r => `- ${r.vendor}: ${formatCurrency(r.amount)} (${formatDate(r.date)})`).join('\n')}`;
}

// Convert PDF to image (for preview) - IMPROVED VERSION
export async function convertPdfToImage(pdfUri: string): Promise<string> {
  try {
    console.log('Converting PDF to image for preview:', pdfUri);
    
    // Simulate a delay for conversion
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    // In a real app, we would use a library to render the first page of the PDF as an image
    // For this demo, we'll return realistic receipt images based on the PDF filename or content
    
    // Check if the filename contains hints about the content
    const lowerPdfUri = pdfUri.toLowerCase();
    
    // Return different receipt images based on content hints
    if (lowerPdfUri.includes('restaurant') || lowerPdfUri.includes('cafe') || lowerPdfUri.includes('food')) {
      // Restaurant receipt
      return 'https://images.unsplash.com/photo-1572715376701-98568319fd0b?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=687&q=80';
    } else if (lowerPdfUri.includes('grocery') || lowerPdfUri.includes('albert') || lowerPdfUri.includes('jumbo') || lowerPdfUri.includes('supermarket')) {
      // Grocery receipt
      return 'https://images.unsplash.com/photo-1619465908123-cbc4aef04a2b?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=687&q=80';
    } else if (lowerPdfUri.includes('hotel') || lowerPdfUri.includes('accommodation') || lowerPdfUri.includes('booking')) {
      // Hotel receipt
      return 'https://images.unsplash.com/photo-1626788460425-8c93c4776a7b?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=687&q=80';
    } else if (lowerPdfUri.includes('gas') || lowerPdfUri.includes('fuel') || lowerPdfUri.includes('shell') || lowerPdfUri.includes('bp') || lowerPdfUri.includes('esso')) {
      // Gas station receipt
      return 'https://images.unsplash.com/photo-1629138144227-c8c0912d5f86?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=687&q=80';
    } else if (lowerPdfUri.includes('pharmacy') || lowerPdfUri.includes('etos') || lowerPdfUri.includes('kruidvat')) {
      // Pharmacy receipt
      return 'https://images.unsplash.com/photo-1576602976047-174e57a47881?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=687&q=80';
    } else if (lowerPdfUri.includes('electronics') || lowerPdfUri.includes('mediamarkt') || lowerPdfUri.includes('coolblue')) {
      // Electronics store receipt
      return 'https://images.unsplash.com/photo-1556742049-0cfed4f6a45d?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=687&q=80';
    } else {
      // Default generic receipt image - this looks like a real receipt
      return 'https://images.unsplash.com/photo-1563013544-824ae1b704d3?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1470&q=80';
    }
  } catch (error) {
    console.error('Error converting PDF to image:', error);
    // Return a fallback receipt image
    return 'https://images.unsplash.com/photo-1563013544-824ae1b704d3?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1470&q=80';
  }
}